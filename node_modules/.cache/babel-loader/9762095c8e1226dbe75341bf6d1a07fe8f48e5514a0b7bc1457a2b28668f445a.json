{"ast":null,"code":"var _jsxFileName = \"/Users/namitasajai/Desktop/react-drawing-app/src/components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  color,\n  width,\n  erasing\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.strokeStyle = erasing ? '#FFFFFF' : color; // Erase with white or use selected color\n    context.lineWidth = width;\n  }, [color, width, erasing]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    context.beginPath();\n    context.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    context.lineTo(offsetX, offsetY);\n    context.stroke();\n  };\n  const stopDrawing = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.closePath();\n    setIsDrawing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: \"800\",\n    height: \"600\",\n    onMouseDown: startDrawing,\n    onMouseMove: draw,\n    onMouseUp: stopDrawing,\n    onMouseOut: stopDrawing,\n    style: {\n      border: '2px solid black'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(Canvas, \"Rc1MuciVfv4DkDO26/A+shRY+68=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","Canvas","color","width","erasing","_s","canvasRef","canvas","current","context","getContext","strokeStyle","lineWidth","isDrawing","setIsDrawing","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","draw","lineTo","stroke","stopDrawing","closePath","ref","height","onMouseDown","onMouseMove","onMouseUp","onMouseOut","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/namitasajai/Desktop/react-drawing-app/src/components/Canvas.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\nconst Canvas = ({ color, width, erasing }) => {\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        context.strokeStyle = erasing ? '#FFFFFF' : color;  // Erase with white or use selected color\n        context.lineWidth = width;\n    }, [color, width, erasing]);\n\n    const [isDrawing, setIsDrawing] = useState(false);\n\n    const startDrawing = ({ nativeEvent }) => {\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        const { offsetX, offsetY } = nativeEvent;\n        context.beginPath();\n        context.moveTo(offsetX, offsetY);\n        setIsDrawing(true);\n    };\n\n    const draw = ({ nativeEvent }) => {\n        if (!isDrawing) {\n            return;\n        }\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        const { offsetX, offsetY } = nativeEvent;\n        context.lineTo(offsetX, offsetY);\n        context.stroke();\n    };\n\n    const stopDrawing = () => {\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        context.closePath();\n        setIsDrawing(false);\n    };\n\n    return (\n        <canvas\n            ref={canvasRef}\n            width=\"800\"\n            height=\"600\"\n            onMouseDown={startDrawing}\n            onMouseMove={draw}\n            onMouseUp={stopDrawing}\n            onMouseOut={stopDrawing}\n            style={{ border: '2px solid black' }}\n        />\n    );\n};\n\nexport default Canvas;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,MAAM,GAAGA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACZ,MAAMU,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvCD,OAAO,CAACE,WAAW,GAAGP,OAAO,GAAG,SAAS,GAAGF,KAAK,CAAC,CAAE;IACpDO,OAAO,CAACG,SAAS,GAAGT,KAAK;EAC7B,CAAC,EAAE,CAACD,KAAK,EAAEC,KAAK,EAAEC,OAAO,CAAC,CAAC;EAE3B,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMiB,YAAY,GAAGA,CAAC;IAAEC;EAAY,CAAC,KAAK;IACtC,MAAMT,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvC,MAAM;MAAEO,OAAO;MAAEC;IAAQ,CAAC,GAAGF,WAAW;IACxCP,OAAO,CAACU,SAAS,CAAC,CAAC;IACnBV,OAAO,CAACW,MAAM,CAACH,OAAO,EAAEC,OAAO,CAAC;IAChCJ,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMO,IAAI,GAAGA,CAAC;IAAEL;EAAY,CAAC,KAAK;IAC9B,IAAI,CAACH,SAAS,EAAE;MACZ;IACJ;IACA,MAAMN,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvC,MAAM;MAAEO,OAAO;MAAEC;IAAQ,CAAC,GAAGF,WAAW;IACxCP,OAAO,CAACa,MAAM,CAACL,OAAO,EAAEC,OAAO,CAAC;IAChCT,OAAO,CAACc,MAAM,CAAC,CAAC;EACpB,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMjB,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvCD,OAAO,CAACgB,SAAS,CAAC,CAAC;IACnBX,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,oBACId,OAAA;IACI0B,GAAG,EAAEpB,SAAU;IACfH,KAAK,EAAC,KAAK;IACXwB,MAAM,EAAC,KAAK;IACZC,WAAW,EAAEb,YAAa;IAC1Bc,WAAW,EAAER,IAAK;IAClBS,SAAS,EAAEN,WAAY;IACvBO,UAAU,EAAEP,WAAY;IACxBQ,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAkB;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV,CAAC;AAAChC,EAAA,CAnDIJ,MAAM;AAAAqC,EAAA,GAANrC,MAAM;AAqDZ,eAAeA,MAAM;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}